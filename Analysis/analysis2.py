# -*- coding: utf-8 -*-
"""Analysis2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kqmu_jW2sEKP8lvCTW6kwHA6yuc2FXoJ

##Extract Phonemes
"""

#import libraries
import pandas as pd
import numpy as np

#load dataset
df = pd.read_csv('new_words.csv')

#install nltk library
!pip install nltk

#download CMU pronouncing dictionary to extract phonemes
import nltk
nltk.download('cmudict')

#import CMU pronouncing dictionary
from nltk.corpus import cmudict

#load the CMU pronouncing dictionary
d = cmudict.dict()

#define a function to get the phonemes for each word
def get_phonemes(word):
    phonemes = d.get(word.lower(), [''])[0]
    return ' '.join(phonemes)

#apply the function to the word column and create a column to save the extracted phonemes
df['phonemes'] = df['word'].astype(str).apply(get_phonemes)

"""##Extract Visemes"""

#define the Viseme-Phone Conversion Table (VPCT)
vpct = {
    'AA': 'AH',
    'AE': 'AH',
    'AH': 'AH',
    'AO': 'OH',
    'AW': 'OW',
    'AY': 'AY',
    'B': 'B',
    'CH': 'CH',
    'D': 'D',
    'DH': 'TH',
    'EH': 'EH',
    'ER': 'ER',
    'EY': 'AY',
    'F': 'F',
    'G': 'G',
    'HH': 'HH',
    'IH': 'IH',
    'IY': 'EE',
    'JH': 'CH',
    'K': 'K',
    'L': 'L',
    'M': 'M',
    'N': 'N',
    'NG': 'NG',
    'OW': 'OW',
    'OY': 'OY',
    'P': 'P',
    'R': 'R',
    'S': 'S',
    'SH': 'SH',
    'T': 'T',
    'TH': 'TH',
    'UH': 'UH',
    'UW': 'OO',
    'V': 'V',
    'W': 'W',
    'Y': 'Y',
    'Z': 'Z',
    'ZH': 'SH',
}

#define a function to get the visemes for each word
def get_visemes(phonemes):
    if isinstance(phonemes, str):
        visemes = []
        for phoneme in phonemes.split():
            viseme = vpct.get(phoneme, '')
            if viseme:
                visemes.append(viseme)
        return ' '.join(visemes)
    else:
        return ''

#apply the function to the 'phonemes' column and create a column to save the extracted visemes
df['visemes'] = df['phonemes'].apply(get_visemes)

"""##Extract Homophones"""

#load the CMU pronouncing dictionary
d = cmudict.dict()

#define a function to find homophones of a word
def find_homophones(word):
    if word in d:
        phonemes = d[word][0]
        homophones = [w for w in d if d[w][0] == phonemes and w != word]
        return homophones
    else:
        return []

#function to add the extracted homophones to the dataframe
def add_homophones_to_dataframe(df):
    homophones = []
    for index, row in df.iterrows():
      #convert word to lowercase and remove whitespaces
        word = str(row['word']).strip().lower()
        #skip adding homophones if the word is an integer
        if word.isdigit():
            homophones.append([])
        else:
            homophones.append(find_homophones(word))
    df['homophones'] = homophones
    return df


#add the homophones column
df = add_homophones_to_dataframe(df)

#use regular expression to check if a word has homophone
import re

#function to check if a word has a homophone
def has_homophone(homophones):
    if isinstance(homophones, str) and re.match(r'\[.*\]', homophones):
        return re.sub(r'[\[\]]', '', homophones).strip()
    elif isinstance(homophones, list) and len(homophones) > 0:
        return ', '.join(homophones)
    else:
        return ''

#create a new column to indicate if a word has homophone
df['homophones'] = df['homophones'].apply(has_homophone)

df

#df.to_csv("phonemes_homophones.csv", sep="\t", index=False)

#function to check if a word has a corresponding homophone
def has_homophone(row):
    homophones = row['homophones']
    if pd.isnull(homophones) or homophones == '':
        return 'No'
    else:
        return 'Yes'

#create a new column to indicate if a word has an homophone
df['HH'] = df.apply(has_homophone, axis=1)

df

df.to_csv("updated_homophones.csv", sep="\t", index=False)